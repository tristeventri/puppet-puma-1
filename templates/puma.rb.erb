#!/usr/bin/env puma
# MANAGED BY PUPPET
# Module:: dsi::puma
# Start Puma with next command:
# RACK_ENV=production bundle exec puma -C ./config/puma.rb

# The directory to operate out of.
#
# The default is the current directory.
#
directory '<%= @app_root %>/current'

rackup '<%= @app_root %>/current/config.ru'

# Set the environment in which the rack's app will run.
#
# The default is set to puppet's environment
#
environment '<%= @env %>'

# Daemonize the server into the background. Highly suggest that
# this be combined with “pidfile” and “stdout_redirect”.
#
daemonize <%= @puma_daemonize %>

# Store the pid of the server in the file at “path”.
#
pidfile "<%= @puma_pid_path %>"

# Use “path” as the file to store the server info state. This is
# used by “pumactl” to query and control the server.
#
state_path "<%= @puma_pid_dir %>/puma.state"

# Redirect STDOUT and STDERR to files specified. The 3rd parameter
# (“append”) specifies whether the output is appended, the default is
# “false”.
#
stdout_redirect "<%= @puma_stderr_log_path %>", "<%= @puma_stdout_log_path %>", "<%= @puma_log_append %>"

# Disable request logging.
#
# The default is “false”.
#
# quiet

# Configure “min” to be the minimum number of threads to use to answer
# requests and “max” the maximum.
#
# The default is “0, 16”.
#
threads <%= @min_threads %>, <%= @max_threads %>

# Bind the server to “url”. “tcp://”, “unix://” and “ssl://” are the only
# accepted protocols.
#
# The default is “tcp://0.0.0.0:9292”.
#
bind 'tcp://<%= @bind_ip %>:<%= @port %>'
#bind "unix://<%= @puma_socket_path %>"

# Instead of “bind 'ssl://127.0.0.1:9292?key=path_to_key&cert=path_to_cert'” you
# can also use the “ssl_bind” option.
#
# ssl_bind '127.0.0.1', '9292', { key: path_to_key, cert: path_to_cert }

# Code to run before doing a restart. This code should
# close log files, database connections, etc.
#
# This can be called multiple times to add code each time.
#
# on_restart do
#   puts 'On restart...'
# end

# Load the restart plugin
#plugin 'tmp_restart'

# Command to use to restart puma. This should be just how to
# load puma itself (ie. 'ruby -Ilib bin/puma'), not the arguments
# to puma, as those are the same as the original process.
#
#restart_command "<%= @restart_command %>"

# === Cluster mode ===

# How many worker processes to run.
#
workers <%= @workers %>

<% if @preload_app %>
preload_app!
<% else %>
prune_bundler
<% end %>

# Code to run when a worker boots to setup the process before booting
# the app.
#
# This can be called multiple times to add hooks.
#
# on_worker_boot do
#   puts 'On worker boot...'
# end

<% if @on_restart %>
on_restart do
  puts "Refreshing Gemfile"
  ENV["BUNDLE_GEMFILE"] = "<%= @app_root %>/current/Gemfile"
end
<% end %>

<% if @init_active_record %>
on_worker_boot do
  ActiveSupport.on_load(:active_record) do
    ActiveRecord::Base.establish_connection
  end
end
<% end %>

# === Puma control rack application ===

# Start the puma control rack application on “url”. This application can
# be communicated with to control the main server. Additionally, you can
# provide an authentication token, so all requests to the control server
# will need to include that token as a query parameter. This allows for
# simple authentication.
#
# Check out https://github.com/puma/puma/blob/master/lib/puma/app/status.rb
# to see what the app has available.
#
# activate_control_app 'unix:///var/run/pumactl.sock'
# activate_control_app 'unix:///var/run/pumactl.sock', { auth_token: '12345' }
# activate_control_app 'unix:///var/run/pumactl.sock', { no_token: true }
